# day02

프로젝트 폴더의 구조
	Java Resource
		==> JSP가 사용할 자바 소스코드(클래스)를 코딩하는 위치
			
			Java Resource/src/필요한 패키지
			를 만들고 그 내부에 클래스를 만들어서 사용하면 된다.
			
	WebContent
		==> 이 위치가 실제 JSP나 또는 HTML, 자바스크립트, CSS 등 
			응답에 필요한 문서를 작성하는 위치
			
			WebContent
				==> 웹서버가 직접 요청하는 문서를 저장하는 폴더
				
			WebContent/WEB-INF
				==> Servlet 프로그램에 의해서 요청하는 문서를 저장하는 폴더
				
		해당 위치를 기본 폴더로 해서 원하는 폴더를 만든 후
		그 아래에 필요한 문서를 만들면 된다.
		
		예제]
			WebContent 아래에 sample 폴더를 만들고
			그 폴더에 sample.jsp 파일을 만들어 테스트 한다.
			
			문서요청은
			우리의 경우 루트경로가 localhost/FJsp 이므로
				http://localhost/FJsp/sample/sample.jsp
			으로 요청한다.
			
==================================================================================

	XML
		Extensible Markup Language 의 약자로
		확장성 있는 마크업 언어 라고 이야기한다.
		
		태그를 이용해서 파일의 내용을 구분하도록 만들어지는 문서를 말하며
		이중에 HTML 문서도 있다.
		
		이때 HTML의 경우는 사용하는 태그가 이미 결정이 되어 있지만
		xml 은 사용자가 태그의 종류를 정한 후
		그 태그를 이용해서 문서를 만드는 것을 말한다.
		
		이 문서는 주로 프로그램의 환경 설정을 하기 위한 목적으로 많이 사용되는 문서이다.
		
		프로그램은 프로그램을 실행하기 전
		먼저 설정파일(xml)을 읽은 후
		그 파일의 태그를 분석한다. ==> 분석하는 이 작업을 파싱한다. 라고 말한다.
		그리고 그 파싱된 결과를 프로그램에서 이용하는 과정을 거친다.
		
		***
		결론적으로 어떤 프로그램의 실행 환경(시작환경)을 바꾸고 싶으면
		우리는 xml 파일에서 그 환경을 설정하는 부분을 찾아서 수정하면 된다.
		
		참고]
			파싱을 하기 위해서는 그 xml 문서에 있는 태그의 의미를 알아야 한다.
			xml 문서를 만드는 사람이 태그의 순서, 의미를 지정해 놓은 문서가 별도로 존재하는데
			이 문서를 "DTD" 혹은 "스키마문서" 라고 한다.
			
	
	환경설정]
		1. welcome 파일 수정하기
			Welcome 파일 : 	클라이언트가 파일이름을 지정하지 않을 경우
							자동적으로 응답할 파일을 이야기 한다.
							
			방법]
				1. web.xml 파일에서
				2. <welcome-file-list> 태그를 수정하면 된다.
				
		2. 호스팅하기
			==> 실제로 www.naver.com 과 같이 도메인 이름으로 접속을 하는데 
				우리는 
					http://localhost/FJsp/???? 
				을 해야한다.
				
			이유는 우리는 도메인이 없기 때문에 
			서버를 구분해주는 아이피를 입력하고 
			웹서비스를 해주는 서버에 접근을 해서 요청해야 하지만
			컴퓨터 자기자신을 가리키는 예약어가 localhost 이므로
			localhost를 써주고 있다.
			실제 서비스 되고 있는 웹 서버처럼 요청을 하려면
			먼저 도메인이 등록이 되어야 하고
			그리고 서비스를 해줄 서버도 호스팅이 되어야 한다.
			
			만약 도메인이 등록이 되어 있다면
			다음 방법으로 하면 된다.
				
				1. 도메인 등록을 하고
				2. 특정 IP를 가진 컴퓨터에 톰캣을 설치한다.
				3. server.xml 파일에서
					<Host appBase="webapps" autoDeploy="true"
							name="localhost" unpackWARs="true">
					부분을 수정하는데
					
					<Host name="www.FJsp.org" appBase="FJsp" 
						autoDeploy="true" unpackWARs="true"
						xmlValidation="false" xmlNamespaceAware="false">
					</Host>
					
				==> 우리의 경우 도메인이 아직 준비가 되어있지 않으므로 
					걍 localhost를 사용하기로 하자.
					
		3. 프로젝트 이름 바꾸기
			==> 만약 프로젝트 이르을 노출하기 싫으면
				접속 프로젝트를 변경할 수 있다.
				
				1. server.xml 파일을 열고
				2. 
					<Context docBase="FJsp" path="/" reloadable="true" source="org.eclipse.jst.jee.server:FJsp"/>
					에서  path 부분을 수정하면 된다.
					
					
==================================================================================
 	
 	중요사항
 		
 		Java에서는 중간에 빠져도 이후에 수업내용을 따라갈 수가 있었지만
 		지금 부터는 중간에 한시간이라도 놓치게되면 
 		수업의 이후내용을 따라갈 수가 없게 된다.
 		
 		JSP에서는 한군데서 에러가 발생하면
 		모든기능을 사용 못하는 경우가 생길 수도 있다.
 		
==============================================================================

JSP 구조
	JSP는 응답 문서(주로 HTML 문서)를 만들기 위한 언어의 일종이다.
	
	따라서 HTML 문서가 중심이 된다.
	그리고 추가적으로 자바적인 요소가 필요하면 포함될 수 있다.
	
	==>
		JSP는 자바적인 요소를 포함 할 수 있는 스크립트 언어
		
	
	HTML과의 차이점
		HTML은 서버측에서 실행이 불가능하고
		오직 클라이언트(웹 브라우저)에서만 실행이 가능한 언어다.
		==> 오직 이미 준비된 문서를 단순히 응답하는 것일 뿐이고
			내용 변화를 시킬 수 없다.
		
		JSP는 서버측에서 실행할 수 있는 언어
		==> 요청이 올 때마다 서버측에서 실행을 해서
			새로운 HTML 문서를 제작을 할 수 있다.
			요청이 올 때마다 내용 변화를 시킬 수 있다.
			
			
JSP 구조에서 반드시 알아야 할 내용
	==> 자바적인 요소를 어떤 방식으로 HTML문서 안에 넣을것인가???
	
	
	지시자
		==> JSP 문서의 특징이나 처리방식을 지시하는 명령
		
		형식]
			<%@		명령어		속성=값 	속성=값 ... %>
			
		명령어 종류]
			page		- 문서 자체의 특성이나 처리방식을 지시하는 명령
			include		- 문서 안에 다른 문서를 포함하도록 지시하는 명령
			taglib		- 사용자가 제작한 태그를 사용할 수 있도록 선언하는 명령
			
		
		1. page 명령
			==> 지금 만드는 문서 자체에 특성이나 처리 방식을 지시하는 명령
			
				형식]
					<%@ page 속성=값 속성=값 ... %>
					
				참고]
					속성 :
							지정하고 싶은 특성이나 처리방식에 대한 예약된 단어
					값	:
							그 특성이나 처리방식에 대한 내용
							
					1) language
						==> 스크립트할 언어의 종류를 지정하는 속성
							지금까지는 오직 자바언어만 허락하는 상태
							생략하면 자동으로 Java를 스크립트 해준다.
							
						예]
							<%@ language="java" %>
							
					2) extends
						==> JSP는 실행을 하면 내부적으로 자바 클래스로 변환되고
							그후 실행이 된다.
							(즉, 중간단계의 언어로 바뀐 상태에서 실행을 하므로
							ASP, PHP보다 실행속도가 빠르다는 장점을 가지고 있다.)
							
							이때 중간에서 만들어지는 클래스가 어떤 클래스를 상속 받아서
							만들지를 지정하는 속성
							
							이미 jsp 문서가 클래스로 변활될 때 HttpJspBase 라는 클래스를 
							상속받아서 만들도록 약속을 해 놓았다.
							그런데 자바는 다중상속이 불가능하므로 필요없는 속성이다.
							생략하면 자동적으로 HttpJspBase 를 상속 받아준다.
							
						예]
							<%@ page extends="javax.servlet.jsp.HttpJspBase" %>
					
					*
					3) import
						==> 스크립트안에 자바적인 요소를 넣을 수 있는데
							이때 사용하는 자바적인 요소를 특정 패키지 소속이면
							자바와 동일하게 반드시 import 시켜야 한다.
							그 작업을 해주는 속성
							
							예]
								<%@ import="java.util.*" %>
								
						참고]
							위의 경우는 하나만 임포트 하는 경우고
							여러개를 한번에 임포트 할 수도 있다.
							
							<%@ import="java.uitl.*, java.text.*" %>
							
					4) session
						==> 세션의 사용 여부를 판단하도록 하는 속성
							생략하면 세션을 사용하도록 한다.(기본이 true)
							
						예]
							<%@ page session="true" %>
					
					5) buffer
						==> 내부적으로 버퍼를 사용할지 여부와
							버퍼의 크기를 얼마로 할지 여부를 지정하는 속성
							생략하면 기본값으로 8KByte를 버퍼로 사용한다.
							
						예]
							<%@ page buffer="none" %>
							==> 버퍼를 사용하지 않겠다.
							
							<%@ page buffer="16K" %>
							==> 버퍼의 사이즈를 16KByte로 지정
							
						참고]
							버퍼란???
								클라이언트에게 서버가 응답을 할 때 
								처리속도를 빠르게 하기 위해서
								중간에 버퍼를 사용해서
								데이터를 모았다가 한번에 출력하는 구조
					
					6) autoFlush
						==> 자동 flush 기능을 사용할지 여부를 가리키는 속성
							생략하면 true 가 지정되고 자동 flush 기능이 실행된다.
						
						예]
							<%@ page autoFlush="true" %>
						
						참고]
							만약 autoFlush="false" 로 설정하면
							반드시 강제로 flush 를 시켜 줘야 한다.
					
					7) isThreadSafe
						==> 스레드 처리를 할 때 동기화 처리 여부를 설정하는 속성
							생략하면 자동 동기화 처리를 하도록 설정된다.
							
						예]
							<%@ page isThreadSafe="true" %>
						
						참고]
							JSP의 모든 문서는 자동 스레드 처리가 된다.
							즉, 여러 클라이언트가 동시에 접속을 하더라도
							스레드 처리를 해서 응답하도록 되어 있다.
							
					8) info
						==> 주석문에 해당 하는 속성
							실행에는 아무런 상관이 업고
							문서에 대한 정보(주석)를 입력하고 싶을 경우 사용하는 속성
							
						예]
							<%@ page inof="여기는 설명페이지..." %>
					
					*
					9) errorPage
						==> JSP 문서를 실행하는 도중 문제(Exception)가 발생하면
						 	그 문서로는 응답을 해줄 수가 없다.
						 	그래서 대신 응답할 다른 문서를 지정하는 속성
						 	
						 예]
						 	<%@ page errorPage="myError.jsp" %>
						 	==> 에러가 발생하면 대신 myError.jsp 로
						 		클라이언트에게 응답한다.
					
					*
					10) isErrorPage
						==> 지금 만드는 문서가 에러 페이지용 문서인지를 지정하는 속성
							
						예]
							<%@ page isErrorPage="true" %>
					
					*
					11) contentType
						==> 실행결과 응답 방식을 지정하는 속성
						
						참고]
							실행결과 탄생하는 문서의 종류를 지정할 수 있다.
							이때 응답 문서의 종류는 MIME Type으로 지정해야 한다.
							
						예]
							<%@ page contentType="text/html" %>
							==> 실행결과 응답 문서의 형식은 html 문서다.
							
						참고]
							이 속성에는 한글 인코딩 방식도 같이 지정할 수 있다.
							
							형식]
								<%@ page contentType="mimeType; charset=UTF-8" %>
								
						참고]
							이 속성은 매우 중요한 속성으로
							생략하면 일반 text 파일로 응답하게 된다.
							그래서 거의 반드시 지정해야하는 유일한 속성이다.
					
					12) pageEncoding
						==> 문자 인코딩 방식을 지정하는 속성
						
						예]
							<%@ page pageEncoding="UTF-8" %>
							
						참고]
							contentType 에서 인코딩 방식을 지정할 수 있으므로
							생략해도 무방하다.
							
							
			2. include
				==> 다른 문서를 현재 파일에 포함시키는 기능을 가진 지시어
					그래서 하나의 파일로 만드는 기능
					
				형식]
					<%@ include file="합칠파일이름" %>
					
				참고]
					우리가 홈페이지를 만들다 보면 여러페이지에 같은 내용이 중복되어서
					들어가는 경우가 많이 있다.
					
					하지만 원칙적으로 JSP 문서가 만든 결과를 응답하기 때문에
					매 문서마다 동일한 내용이라도 다시 써줘야 한다.
					
					이런 불편함을 조금이나마 덜기 위한 방법으로 제시된 지시어
					
				결론]
					자주사용하는 내용은 따로 만들어 놓고
					응답 문서의 따로 만들어진 파일을 합쳐서 
					하나의 문서로 만드는 방법
				
				**
				이 작업은 두문서를 합치고(하나의 문서로 만들고) 컴파일을 한다.
				(클래스로 만든다.)
				만약 먼저 합쳤을 때 문제가 생기면(충돌이 나면) 
				에러가 발생한다 것을 명심하자.
		
