# day04

	액션태그
		==>	JSP는 HTML 언어를 기반으로 해서
			필요한 위치에 자바구문을 스크립트하는 방식으로
			만들어지는 언어다.
			그러다보니
			HTML은 태그중심으로 제작이 되고
			자바구문은 <% %>를 이용해서 처리하므로 불편함이 생긴다.
			
		자주 사용하는 자바 기능을 HTML처럼(태그형식으로) 사용할 수 있도록
		만들어 놓은 보조적인 명령을 이야기한다.
		
		
		1. forward 를 대신하는 액션태그
			
			형식 1 ]
				<jsp:forward page="대신응답할 문서" />
				==> 단순히 보여줄 페이지만 변경하는 것
				
			형식 2 ]
				<jsp:forward page="대신응답할 문서">
					<jsp:param name="키값" value="데이터" scope="???">
					....
					
				</jsp:forward>
				==> 보여줄 페이지를 변경하면서 부가 정보를 알려준다.
				
			*
			참고]
				액션태그는 xhtml을 기반으로 제작된 태그이다.
				따라서 몸체가 있는태그는
					<태그이름>
						내용
					</태그이름>
					
				몸체가 없는 태그는
					<태그이름 속성="???" />
					
		*
		2. 다른 문서를 포함시키는 기능을 가진 액션 태그
			( <%@ include file="" %> 와 비스산 역할을 하는 태그이다.)
			
			형식]
				<jsp:include page="합칠 문서이름" />
				
			주의]
				<%@ include file="???" %>
					의 구문은 먼저 코드를 합친후에 클래스를 만든다.
					따라서 합쳤을 때 충돌이 나지 않도록 주의 해야 한다.
				
				<jsp:include page="???" />
					각 파일을 (포함되는 파일 포함해서) 각각  클래스로 만든 후에 실행한 후
					실행 결과만 합치게 된다.
					따라서 컴파일 할 때 출돌이 발생할 염려가 없다.
					
==========================================================================================

	표현언어 ( Expression Language  : EL )
		
		형식]
			${ 출력내용 }
			
		의미]
			출력할 내용을 화면에 출력한다.
			출력할 내용은 변수, 연산식, 상수 등 모든 것들이 올 수 있다.
			이전 수업에서 표현자방식 (<%= %> ) 과 같은 기능
			
		예]
			컨트롤러에서 
				request.setAttribute("NAME", "홍길동");
			이라고 뷰에게 넘겨주면
			뷰에서는 
				${NAME}
			이렇게 사용하면 홍길동 이 출력이 된다.
			
	EL 의 영역
		1. pageScope		- Page 영역에 존재하는 객체를 참조할 때 사용
		2. requestScope		- Request 영역에 존재하는 객체를 참조할 때 사용
		3. sessionScope		- Session 영역에 존재하는 객체를 참조할 때 사용
		4. applicationScope - Application 영역 
		5. param			- 파라미터 값을 얻어올때 사용
		6. paramValues		- 파라미터 값을 배열로 얻어올 때 사용
		7. header			- Header 정보를 얻어올 때 사용
		8. headerValues		- Header 정보를 배열로 얻어올 때 사용
		9. cookie			- 쿠키 객체를 참조할 때 사용
		10. initParam		- 컨텍스트의 초기화 파라미터를 의미
		11. pageContext		- PageContext 객체를 참조할 때 사용
		
		사용방법]
			
			${스코프.객체이름}
			
===================================================================================

	JSTL ( Java Standard Tag Library )
	==>	JSP를 제작하다보면 HTML과 자바가 혼용되어 만들어진다.
		그래서 자바구문을 입력하는 경우는 스크립트 릿(<% %>)을 사용해서 입력하게 된다.
		==> 이것은 개발자가 뷰(html) 문서를 제작할 때 항상 고민이 되는 부분이다.
		
	JSTL 이란?
		JSP는 HTML(태그를 이용한 문서작성)이 우선되므로
		자바구문이 들어갈 경우 그 요소 역시 태그 형식으로 사용할 수 있도록 해서
		(그러면 문서를 작성하는 사람이 한가지 형식으로 작성을 할 수 있게된다.)
		통일된 방식으로 문서를 만들 수 있도록 만들어 놓은 라이브러리
		
		예]
			지금까지는
				<%
					for(int i = 0 ; i < 10 ; i++ ){
				%>
						<div><h3>가나다라</h3></div>
				<%
					}
				%>
			이렇게 작업했지만
			
			JSTL에서는
				<c:forEach begin="0" end="10" step="1">
					<div><h3>가나다라</h3></div>
				</c:forEach>
				
				
	JSTL 사용방법
		
		1. JSTL라이브러리를 다운 받아서 프로젝트의
			WebContent/WEB-INF/lib 폴더에 복사해 놓는다.
				
				jstl.jar, standard.jar 두개를 복사한다.
				
			(이 라이브러리는 JSP문서를 제작할 때 필요한 라이브러리이므로 
				자바 클래스 제작에 필요한 것은 아니고
				오직 JSP 라이브러리 추가하는 부분에 넣어 둬야 한다.)
				
			참고]
				이클립스의 Java Build Path에 등록한 것은
				자바 클래스가 사용할 목적의 라이브러리를 등록하는 것
				
		참고]
			JSTL 의 종류
				
				1. Core Tag
					==> 일반적인 자바 명령을 태그로 만들어 놓은 라이브러리
				
				2. Formatting Tag
					==> 출력할 때 모양을 지정하기 위한 기능을 태그로 
						만들어 놓은 라이브러리
				
				3. Function Tag
					==> 자바에서 자주 사용하는 함수를 사용할 수 있도록
						만들어 놓은 라이브러리
				
				4. XML Tag
					==> xml 문서 처리를 위한 기능을 태그로 만들어 놓은 라이브러리
				
				5. SQL Tag
					==> 데이터베이스를 사용할 때 필요한 기능을 태그로 만들어 놓은 라이브러리
		
		--------------------------------------------------------------------------------------
		2. JSTL 이 필요한 문서(JSP)에 5가지중 필요한 라이브러리를 사용할 수 있도록
			등록해야 한다.
			==> 이 작업은 모든 JSP 문서에서 매번 해줘야 한다.
			
			형식]
				<%@ taglib prefix="??" uri="???" %>
				
				prefix 	- 	아무거나 써도 상관없지만
							의미는 taglib는 누군가 만들어 놓은 태그를 사용하도록 하는 명령이다.
							이때 자바는 오픈 소스이므로 아무나 만들고 배포할 수 있다.
							
							==> 이렇다 보니 태그의 이름이 중복될 수 있는 문제점이 발생한다.
							
					따라서 태그를 사용하는 사용자가 각각의 태그를 구분하기 위해 부여한 자신만의 규칙
					
				uri		-	이 태그라이브러리를 제공하는 CDN 네트워크 경로
							혹은
							태그 라이브러리 기능을 제공하는 클래스 이름을 지정하는 부분
							
					예]
						
						A
							<str></str>
							기능을 만들어서 올렸다.
							(기능은 문자열로 출력하는 기능)
							
						B
							<str></str>
							(문자열을 기억하는 기능)
							
					사용자 입장에서
						
						A가 만든 것은 prefix="a"
						B가 만든 것은 prefix="b"
						
						==> 
						문자를 출력할 경우에는
							<a:str>????</a:str>
						문자열을 기억할 경우에는
							<b:str>기억내용</b:str>
							
		prefix 는 태그가 겹치지 않도록 사용자가 정해주면 되지만
		암묵적으로 개발자들 사이에 정해진 룰이 존재한다.
		
		불문율
		
		1. Core
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
				
		2. Formatting
			<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
			
		3. SQL
			<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
			
		4. XML
			<%@ taglib prefix="x" uri="http://java.sun.com/jsp/jstl/xml" %>
			
		5. Function
			<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
