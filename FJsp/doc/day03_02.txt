# day03_02

	*
	3. response
	==> 서버가 클라이언트에게 응답하는 정보를 관리하는 내장 객체
		
		HttpServletResponse 라는 클래스를 이용해서 만들어진 내장 객체
		
		주요함수]
			
			sendRedirect()
			==> 서버측에서 강제로 클라이언트의 요청을 변경하는 명령
				즉, 클라이언트는 A를 요청했는데
				서버측에서 강제로 B로 응답하도록 하는 방법
				
				예를 들어 게시판 글쓰기를 요청한 경우
				이때 글쓰기 작업이 끝나면 끌쓰기 작업에 대한 응답을 
				하는 것이 아니고 강제로 목록보기 페이지로 
				응답하는 것이 일반적이다.
				
				그런데 이때 목록보기는 하나의 요청에 해당한다.
				
				이처럼 서버는 가끔 필요하면
				클라이언트의 요청(위의 글쓰기 요청)을 스스로
				다른 요청(위의 목록보기)으로 바꿔야 할 경우가 있다.
				
	참고]
		서버가 요청을 바꾸는 방법
			
			1) redirect 방식
				==> 원래 클라이언트의 요청 정보를 모두 지우고 
					완벽하게 새로운 요청을 만드는 방법
					
					따라서 클라이언트가 요청한 내용은 모두 사라지게 된다.
					
					새로고침을 하게 되면 마지막 요청부터 시작한다.
					즉, 서버가 바꾼 요청부터 시작한다.
					
					
			2) forward 방식
				==> 원래 클라이언트의 요청 정보를 유지한 상태에서
					화면에 보이는 문서만 다른문서로 대체하는 방식
					
					따라서 클라이언트의 요청정보는 기억이되고 있는 상태
					
					새로고침을 하면 처음부터 다시 시작한다.
					즉, 클라이언트의 실제 요청한 요청부터 다시 시작한다.
					
				***
				글쓰기나 회원가입등의 요청은 forward 방식으로 처리를 하게되면
				중복데이터가 입력이 될 수 있으므로
				redirect 방식으로 처리를 해야 한다.
			
			
	4. session
		==> 세션을 관리하는 내장 객체
		
		HttpSession 이라는 클래스를 이용해서 만들어진 내장 객체
		
	5. application
		==> 서버 전체를 관리하는 내장 객체
		
		ServletContext 라는 클래스를 이용해서 만들어진 내장 객체
		
	6. page
		==> 그 문서 자체를 관리하는 내장 객체
		
		PageContext 라는 클래스를 이용해서 만들어진 내장 객체
		
	====================================================================================================
	
	내장객체의 영역
	==> 내장 객체를 이용하면 데이터를 보관하고 사용할 수 있다.
		즉, 서버 스스로가 필요한 데이터를 보관했다가 사용할 수 있다.
		
		물론 자바방식으로 변수에 기억해 놓았다가 사용해도 되지만....
		==> 
			자바로 변수를 만들면
			거의 지역 변수로 만들어지므로 같은 지역(문서)에서만
			사용할 수 밖에 없는 문제점이 생긴다.
		좀더 다양한 문서에서 데이터를 공유할 수 있는 기능을 제공하고 있다.
		
		문제점]
			내장객체를 무엇을 사용해서 데이터를 기억했는가에 따라서
			그 데이터를 사용할 수 있는 영역이 달라진다.
			이때 우리는 이 영역을 내장 객체의 영역이라고 이야기 한다.
			
		예]
			request.setAttribute();
			==> 이렇게 데이터를 기억하면 이것은
				요청이 유지하는 상태에서는 그 데이터를 사용할 수 있다.
				
			session.setAttribute();
			==> 이 방식으로 데이터를 기억한다면
				세션이 유지되는 상태에서는 
				언제든지 그 데이터를 사용할 수 있다.
				
				
	1) pageContext
		==> 같은 문서 안에서만 그 데이터를 사용할 수 있다.
			==> 이것은 거의 사용하지 않는다.
				왜?? 변수로 기억해 놓는 것과 동일하기 때문에...
	
	2) request
		==> 같은 요청을 유지한 문서에서는 그 데이터를 사용할 수 있다.
		
	3) session
		==> 세션이 유지되고 있는 상태에서는 그 데이터를 사용할 수 있다.
		
	4) application
		==> 같은 서버를 사용하는 문서에서 그 데이터를 사용할 수 있다.
			웹 서버는 각각의 클라이언트에게 독립적으로 응답하는 것이 일반적이다.
			즉, 다른 클라이언트의 요청과 상관없이
			그 클라이언트가 요청한 문제점을 해결하는 것이 일반적이다.
			굳이 모든 문서에서 동일한 데이터를 사용할 일이 거의 존재하지 않는다.
			
	참고]
		
		데이터를 입력하는 함수
			setAttribute("키값", 데이터);
			
		데이터를 꺼내는 함수
			getAttribute("키값");
			
========================================================================================================
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			