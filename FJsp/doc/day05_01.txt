# day05_01.txt

	Servlet( 서블릿/ Server Applet )
	==> JSP 파일로 문서를 작성을 하면
		이 파일이 응답이 되는 것이 아니고
		자바 Class 파일로 변화되어서 실행이 되어지고
		그 결과를 응답 해주는 것이다.
		
		==> 모든 JSP 파일은 HttpJspBase 클래스를 상속받아서 만들어지는 클래스이다.
		
		따라서 우리가 서블릿 클래스를 상속받은 클래스를 직접 만들 수 있다면
		서버 입장에서는 JSP를 서블릿 클래스로 변환하는 작업을 줄일 수 있을 것이고
		처리속도도 향상이 될 것이다.
		
	참고]
		WEB 페이지를 만드는 기술의 변천사
			
			Model 1 
				==> JSP 문서내에서 처리하는 기술 - 스크립트 릿 방식
			Model 2
				==> MVC 패턴을 이용해서 처리하는 기술
					
					Model		- 	데이터
					View		- 	화면
					Controller	- 	요청처리, 데이터를 조작, 
									데이터를 가공해서 만드는 역할
					
	---------------------------------------------------------------------------------
	
		서블릿 클래스를 만드는 방법
			
			1. HttpServlet 클래스를 상속 받은 클래스를 제작한다.
			
			2. 제작한 클래스내에 4개의 함수를 오버라이드 한다.
				
				1) public void init() throws ServletException {}
					==> init 시점에 실행되는 함수
						서버가 기동되고 맵핑된 요청이 처음 왔을 경우
						처음 딱 한번만 실행된다.
						일반 자바 클래스로 생각하자면 생성자함수에 해당이 된다.
						
				2) public void doPost(HttpServletRequest req, HttpServletResponse resp)
									throws ServletException, IOException {}
				3) public void doGet(HttpServletRequest req, HttpServletResponse resp)
									throws ServletException, IOException {}
					==> 2), 3) 모두 service 시점에서 실행되는 함수이다.
						따라서 실제로 클라이언트에게 응답하는 내용은 이 안에 작성하면 된다.
						
					참고]
						doGet, doPost 의 차이점은 클라이언트의 요청방식에 따른것이다.
						GET 방식으로 요청을 하면 doGet 함수가 실행이되고
						POST 방식으로 요청을 하면 doPost 함수가 실행 된다.
						
					참고]
						public void service(HttpServletRequest req, HttpServletResponse resp)
									throws ServletException, IOException {}
						를 만들어서 사용한다면 두가지 방식을 모두 처리한다.
						
				4) public void destroy(){}
					==> destroy 시점에서 실행되는 함수
						따라서 이부분에서는 그 클래스가 주로 사용하던 자원을 
						제거하거나 반환해주는 목적으로 사용한다.
						
					==> 거의 제작할 일이 없다.
					
					
		참고]
			서블릿의 생존주기
				
				
				init			서블릿 클래스가 맨 처음 만들어지는(객체로) 시점
				  |				(누군가 맨 처음 이 클래스를 요청을 한 경우
				  |				 딱 한번만 실행한다.)
				service			누군가 이 클래스를 요청한 경우
				  |				( 요청을 할 때마다 실행이 된다.)
				  |
				destroy			적당한 시기(서버가 지정한 시간)동안
								요청이 전혀 없는 경우의 시점
								(적당한 시점이 되면 이 클래스는 없어져야 한다.
									그때 실행이 된다.
									따라서 주로 사용하던 자원을 닫는 목적으로 사용이 된다.)
					
=====================================================================================
	
	***
	서버의 기동 순서
		
		1. 먼저 tomcat에 있는 설정파일들(xml파일들)을 읽어서 처리한다.
		
		2. 프로젝트에 정의되어 있는 설정파일들을 읽어서 처리한다.
		
		==> 따라서 xml 파일에 뭔가 정의가 되어 있다면
			서버가 기동되는 순간 처리가 되어 질 것이고
			처리된 내용은 서버가 서비스를 하고 있는 중에는 계속 적용될 것이다.
=====================================================================================

	***
	서블릿 클래스 요청 등록 방법
		1) web.xml 에 서블릿 이름을 만들고 요청을 매핑을 한다.
			형식]
				
				매핑할 서블릿클래스의 이름을 정하고
				<servlet>
					<servlet-name>적당한이름</servlet-name>
					<servlet-class>제작한클래스패키지경로와 클래스</servlet-class>
				</servlet>
				
				요청 매핑을 해준다.
				<servlet-mapping>
					<servlet-name>위에서 정의한 서블릿이름</servlet-name>
					<url-pattern>요청내용</url-pattern>
				</servlet-mapping>
				
		2) 어노테이션을 이용해서 등록을 한다.
			
			형식]
				제작한 서블릿 클래스 앞에
				
				@WebServlet("요청내용")
				어노테이션을 이용해서 등록한다.
				
				
====================================================================================
	
	web.xml 의 적용범위
		
		1. tomcat 의 web.xml
			==> 서버에서 서비스하는 모든 사이트에 공통적으로 적용되는 설정
		2. 프로젝트의 WEB-INF/web.xml
			==> 프로젝트 내에서만 적용되는 설정
			
====================================================================================


	**********
	요청이 생길때마다
	처리해야할 클래스를 제작을 할 것이고
	제작을 할 때 반드시 받아야할 정보(파라미터)가 있을 것이다.
	이런것들을 정리해서 만들어 놓은 문서가
		
		요청 설계
	라는 문서다.
	
	이문서는 프로젝트 제작이나 유지보수에 반드시 필요한 문서이고
	제출문서에 포함이 되는 문서이다.
	
	형식]
		
		요청내용	: 요청내용
		파라미터	: 전달 받아야 할 정보
		클래스		: 실행할 서블릿 클래스
		뷰			: 보여줄 페이지
		
-----------------------------------------------------------------------------------